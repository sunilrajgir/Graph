class Solution {
    var graph = [Int:[(Int,Int)]]()
    var res = [Int]()
    var visited = [Int]()
    
    func check() {
        setNoOfVertices(5)
        addEdge(0, 1, 10)
        addEdge(0, 2, 5)
        addEdge(2, 1, 3)
        addEdge(2, 3, 9)
        addEdge(2, 4, 2)
        addEdge(1, 3, 1)
        addEdge(4, 0, 3)
        addEdge(4, 3, 6)
        res[0] = 0
        getMinDist(0, 2)
        print(res)
    }
    
    func getMinDist(_ s:Int, _ d:Int) {
        visited[s] = 1
        if graph[s] != nil {
            for item in graph[s]! {
                if visited[item.0] == 0 && res[s]+item.1 < res[item.0] {
                    res[item.0] = res[s]+item.1
                }
            }
        }
        if let next = getMinUnvisited() {
            getMinDist(next, d)
        }
    }
    
    func getMinUnvisited() -> Int? {
        var mn = Int.max
        var ind = -1
        for (index,item) in visited.enumerated() {
            if item != 1 && res[index] < mn {
                mn = res[index]
                ind = index
            }
        }
        return ind == -1 ? nil : ind
    }

    func addEdge(_ s: Int, _ d: Int, _ w: Int) {
        if graph[s] == nil {
            graph[s] = [(d,w)]
        } else {
            var arr = graph[s]!
            arr.append((d,w))
            graph[s] = arr
        }
    }
    
    func setNoOfVertices(_ n: Int) {
        res = Array(repeating: Int.max-10000, count: n)
        visited = Array(repeating: 0, count: n)
    }
}

                
